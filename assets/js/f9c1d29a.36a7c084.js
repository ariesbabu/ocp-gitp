"use strict";(self.webpackChunkocp_gitp=self.webpackChunkocp_gitp||[]).push([[4064],{5680:(e,t,n)=>{n.d(t,{xA:()=>s,yg:()=>g});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,g=p["".concat(u,".").concat(m)]||p[m]||d[m]||l;return n?r.createElement(g,o(o({ref:t},s),{},{components:n})):r.createElement(g,o({ref:t},s))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[p]="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9365:(e,t,n)=>{n.d(t,{A:()=>o});var r=n(6540),a=n(53);const l={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.A)(l.tabItem,o),hidden:n},t)}},1470:(e,t,n)=>{n.d(t,{A:()=>w});var r=n(8168),a=n(6540),l=n(53),o=n(3104),i=n(6347),u=n(7485),c=n(1682),s=n(9466);function p(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function d(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const r=(0,i.W6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u.aZ)(l),(0,a.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(r.location.search);t.set(l,e),r.replace({...r.location,search:t.toString()})}),[l,r])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,l=d(e),[o,i]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:l}))),[u,c]=g({queryString:n,groupId:r}),[p,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,l]=(0,s.Dv)(n);return[r,(0,a.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:r}),f=(()=>{const e=u??p;return m({value:e,tabValues:l})?e:null})();(0,a.useLayoutEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),h(e)}),[c,h,l]),tabValues:l}}var f=n(2303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:t,block:n,selectedValue:i,selectValue:u,tabValues:c}=e;const s=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.a_)(),d=e=>{const t=e.currentTarget,n=s.indexOf(t),r=c[n].value;r!==i&&(p(t),u(r))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=s.indexOf(e.currentTarget)+1;t=s[n]??s[0];break}case"ArrowLeft":{const n=s.indexOf(e.currentTarget)-1;t=s[n]??s[s.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:o}=e;return a.createElement("li",(0,r.A)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>s.push(e),onKeyDown:m,onClick:d},o,{className:(0,l.A)("tabs__item",b.tabItem,o?.className,{"tabs__item--active":i===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:r}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function k(e){const t=h(e);return a.createElement("div",{className:(0,l.A)("tabs-container",b.tabList)},a.createElement(y,(0,r.A)({},e,t)),a.createElement(v,(0,r.A)({},e,t)))}function w(e){const t=(0,f.A)();return a.createElement(k,(0,r.A)({key:String(t)},e))}},2890:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>u,default:()=>g,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var r=n(8168),a=(n(6540),n(5680)),l=n(1470),o=n(9365);const i={sidebar_position:7,title:"Docker Pull Images"},u=void 0,c={unversionedId:"optional_labs/docker_pull",id:"optional_labs/docker_pull",title:"Docker Pull Images",description:"To avoid hitting the rate limit on Docker image pulls, the following procedure can be used to add Docker credentials to the existing OCP pull secret.",source:"@site/docs/optional_labs/docker_pull.md",sourceDirName:"optional_labs",slug:"/optional_labs/docker_pull",permalink:"/optional_labs/docker_pull",draft:!1,editUrl:"https://github.com/ariesbabu/ocp-gitp/edit/main/docs/optional_labs/docker_pull.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"Docker Pull Images"},sidebar:"tutorialSidebar",previous:{title:"Deploy Multi-Zone Application",permalink:"/ocp_topology/multiaz_app1"},next:{title:"Deploying IDP for OCP",permalink:"/optional_labs/ocp_idp"}},s={},p=[{value:"Add the Secret to the Global Cluster Pull Secret",id:"add-the-secret-to-the-global-cluster-pull-secret",level:2}],d={toc:p},m="wrapper";function g(e){let{components:t,...n}=e;return(0,a.yg)(m,(0,r.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"To avoid hitting the rate limit on Docker image pulls, the following procedure can be used to add Docker credentials to the existing OCP pull secret."),(0,a.yg)("h2",{id:"add-the-secret-to-the-global-cluster-pull-secret"},"Add the Secret to the Global Cluster Pull Secret"),(0,a.yg)("p",null,"If you want the credentials to be available cluster-wide (so all projects can pull images from the registry without needing to create secrets in each namespace), you can update the global pull secret in the openshift-config namespace."),(0,a.yg)("p",null,"Extract the Current Global Pull Secret"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"oc extract secret/pull-secret -n openshift-config --to=. --confirm\n")),(0,a.yg)("p",null,"Get your Docker user name and create an access token from ",(0,a.yg)("a",{href:"https://docker.com/",target:"_blank"},"Docker Portal")," "),(0,a.yg)("p",null,"Hash your Docker user name and access token as shown below"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"echo -n '_docker_username:_docker_access_token' | base64\n")),(0,a.yg)("p",null,"This creates a file named .dockerconfigjson in the current directory ",(0,a.yg)("inlineCode",{parentName:"p"},".")),(0,a.yg)("p",null,"Merge the docker registry redentials"),(0,a.yg)("p",null,"Edit the .dockerconfigjson file to include the new registry credentials. The file is a JSON object with an auths key. Add an entry for your registry:"),(0,a.yg)(l.A,{groupId:"Hosts File",mdxType:"Tabs"},(0,a.yg)(o.A,{value:"Template Hosts File",label:"Template JSON File",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json",metastring:"{19,20,21}","{19,20,21}":!0},'{\n    "auths": {\n        "cloud.openshift.com": {\n            "auth": "==",\n            "email": "email@nutanix.com"\n        },\n        "quay.io": {\n            "auth": "==",\n            "email": "email@nutanix.com"\n        },\n        "registry.connect.redhat.com": {\n            "auth": "==",\n            "email": "email@nutanix.com"\n        },\n        "registry.redhat.io": {\n            "auth": "==",\n            "email": "email@nutanix.com"\n        },\n        "<new-registry-server>": {\n          "auth": "_base64_encoded_docker_username:_docker_access_token",\n          "email": "_docker_account_email"\n        }\n    }\n}\n'))),(0,a.yg)(o.A,{value:"Example Hosts Filed",label:"Example JSON File",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json",metastring:"{19,20,21}","{19,20,21}":!0},'{\n    "auths": {\n        "cloud.openshift.com": {\n            "auth": "==",\n            "email": "email@nutanix.com"\n        },\n        "quay.io": {\n            "auth": "==",\n            "email": "email@nutanix.com"\n        },\n        "registry.connect.redhat.com": {\n            "auth": "==",\n            "email": "email@nutanix.com"\n        },\n        "registry.redhat.io": {\n            "auth": "==",\n            "email": "email@nutanix.com"\n        },\n        "docker.io": {\n            "auth": "bXl1c2VyOm15cGFzxxxxxx",\n            "email": "email@personal.com"\n        }\n    }\n}\n')))),(0,a.yg)("p",null,"Update the Global Pull Secret"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"oc set data secret/pull-secret -n openshift-config --from-file=.dockerconfigjson=.dockerconfigjson\n")),(0,a.yg)("p",null,"This update propagates to all nodes, which may take some time depending on the cluster size."),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"Updating the global pull secret affects all projects and requires cluster-admin privileges. Use this approach cautiously to avoid overwriting existing credentials.")),(0,a.yg)("p",null,"Verify the Configuration"),(0,a.yg)("p",null,"To test that the pull secret works, create a pod that uses an image from the private registry:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"oc run test-pod --image=nginx --restart=Never -n default\n")),(0,a.yg)("p",null,"Confirm the Secret Is Linked to the Service Account\nCheck that the pull secret is linked to the service account used by your workloads (e.g., default)."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"oc describe serviceaccount default\n")))}g.isMDXComponent=!0}}]);