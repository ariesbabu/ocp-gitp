"use strict";(self.webpackChunkocp_gitp=self.webpackChunkocp_gitp||[]).push([[6065],{5680:(e,a,t)=>{t.d(a,{xA:()=>g,yg:()=>u});var n=t(6540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=n.createContext({}),p=function(e){var a=n.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},g=function(e){var a=p(e.components);return n.createElement(i.Provider,{value:a},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),c=p(t),m=r,u=c["".concat(i,".").concat(m)]||c[m]||d[m]||o;return t?n.createElement(u,s(s({ref:a},g),{},{components:t})):n.createElement(u,s({ref:a},g))}));function u(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=m;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l[c]="string"==typeof e?e:r,s[1]=l;for(var p=2;p<o;p++)s[p]=t[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9365:(e,a,t)=>{t.d(a,{A:()=>s});var n=t(6540),r=t(53);const o={tabItem:"tabItem_Ymn6"};function s(e){let{children:a,hidden:t,className:s}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.A)(o.tabItem,s),hidden:t},a)}},1470:(e,a,t)=>{t.d(a,{A:()=>w});var n=t(8168),r=t(6540),o=t(53),s=t(3104),l=t(6347),i=t(7485),p=t(1682),g=t(9466);function c(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:a,label:t,attributes:n,default:r}}=e;return{value:a,label:t,attributes:n,default:r}}))}function d(e){const{values:a,children:t}=e;return(0,r.useMemo)((()=>{const e=a??c(t);return function(e){const a=(0,p.X)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,t])}function m(e){let{value:a,tabValues:t}=e;return t.some((e=>e.value===a))}function u(e){let{queryString:a=!1,groupId:t}=e;const n=(0,l.W6)(),o=function(e){let{queryString:a=!1,groupId:t}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:a,groupId:t});return[(0,i.aZ)(o),(0,r.useCallback)((e=>{if(!o)return;const a=new URLSearchParams(n.location.search);a.set(o,e),n.replace({...n.location,search:a.toString()})}),[o,n])]}function y(e){const{defaultValue:a,queryString:t=!1,groupId:n}=e,o=d(e),[s,l]=(0,r.useState)((()=>function(e){let{defaultValue:a,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!m({value:a,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:a,tabValues:o}))),[i,p]=u({queryString:t,groupId:n}),[c,y]=function(e){let{groupId:a}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(a),[n,o]=(0,g.Dv)(t);return[n,(0,r.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:n}),b=(()=>{const e=i??c;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{b&&l(b)}),[b]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),y(e)}),[p,y,o]),tabValues:o}}var b=t(2303);const h={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function N(e){let{className:a,block:t,selectedValue:l,selectValue:i,tabValues:p}=e;const g=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),d=e=>{const a=e.currentTarget,t=g.indexOf(a),n=p[t].value;n!==l&&(c(a),i(n))},m=e=>{let a=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=g.indexOf(e.currentTarget)+1;a=g[t]??g[0];break}case"ArrowLeft":{const t=g.indexOf(e.currentTarget)-1;a=g[t]??g[g.length-1];break}}a?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},a)},p.map((e=>{let{value:a,label:t,attributes:s}=e;return r.createElement("li",(0,n.A)({role:"tab",tabIndex:l===a?0:-1,"aria-selected":l===a,key:a,ref:e=>g.push(e),onKeyDown:m,onClick:d},s,{className:(0,o.A)("tabs__item",h.tabItem,s?.className,{"tabs__item--active":l===a})}),t??a)})))}function f(e){let{lazy:a,children:t,selectedValue:n}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(a){const e=o.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,a)=>(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==n}))))}function v(e){const a=y(e);return r.createElement("div",{className:(0,o.A)("tabs-container",h.tabList)},r.createElement(N,(0,n.A)({},e,a)),r.createElement(f,(0,n.A)({},e,a)))}function w(e){const a=(0,b.A)();return r.createElement(v,(0,n.A)({key:String(a)},e))}},1223:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>g,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var n=t(8168),r=(t(6540),t(5680)),o=t(1470),s=t(9365);const l={title:"OCP and Nutanix NDB",lastupdate:"git",lastupdateauthor:"Lakshmi Balaramane"},i="OCP and Nutanix NDB",p={unversionedId:"ocp_ndb/ocp_ndb",id:"ocp_ndb/ocp_ndb",title:"OCP and Nutanix NDB",description:"In this lab we will setup custom micro-service based application with VM based Nutanix Database NDB service.",source:"@site/docs/ocp_ndb/ocp_ndb.mdx",sourceDirName:"ocp_ndb",slug:"/ocp_ndb/",permalink:"/ocp_ndb/",draft:!1,editUrl:"https://github.com/ariesbabu/ocp-gitp/edit/main/docs/ocp_ndb/ocp_ndb.mdx",tags:[],version:"current",lastUpdatedBy:"LB",lastUpdatedAt:1727413404,formattedLastUpdatedAt:"Sep 27, 2024",frontMatter:{title:"OCP and Nutanix NDB",lastupdate:"git",lastupdateauthor:"Lakshmi Balaramane"},sidebar:"tutorialSidebar",previous:{title:"Backup and Restore Applications",permalink:"/workloads_on_ocp/ocp_k10_backup_restore"},next:{title:"OCP Serverless",permalink:"/ocp_serverless/"}},g={},c=[{value:"Pre-requisites for using NDB Deployed Databases",id:"pre-requisites-for-using-ndb-deployed-databases",level:2},{value:"High Level Overview of NDB and OCP integration",id:"high-level-overview-of-ndb-and-ocp-integration",level:2},{value:"Install NDB Operator on OCP",id:"install-ndb-operator-on-ocp",level:2},{value:"Prepare you Linux Tools VM",id:"prepare-you-linux-tools-vm",level:3},{value:"Install the NDB Operator for OCP",id:"install-the-ndb-operator-for-ocp",level:3},{value:"Create NDB Postgres DB",id:"create-ndb-postgres-db",level:2},{value:"High Level Steps",id:"high-level-steps",level:3},{value:"Prepare Secrets for your Database Server and Database",id:"prepare-secrets-for-your-database-server-and-database",level:3},{value:"Get NDB Cluster&#39;s UUID",id:"get-ndb-clusters-uuid",level:3},{value:"Create Postgres Database using the NDB Operator",id:"create-postgres-database-using-the-ndb-operator",level:3},{value:"Check Database Connectivity",id:"check-database-connectivity",level:3},{value:"Installing a Custom Three-layer Application",id:"installing-a-custom-three-layer-application",level:2},{value:"Create Database Schema and Data",id:"create-database-schema-and-data",level:3},{value:"Install Front End and Back End applications",id:"install-front-end-and-back-end-applications",level:3},{value:"Create Routes to Access the Application",id:"create-routes-to-access-the-application",level:3},{value:"Testing Front End React Application",id:"testing-front-end-react-application",level:3},{value:"Testing Back End Django Application",id:"testing-back-end-django-application",level:3},{value:"Checking Postgres Database Data",id:"checking-postgres-database-data",level:3},{value:"Takeaways",id:"takeaways",level:2}],d={toc:c},m="wrapper";function u(e){let{components:a,...l}=e;return(0,r.yg)(m,(0,n.A)({},d,l,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"ocp-and-nutanix-ndb"},"OCP and Nutanix NDB"),(0,r.yg)("p",null,"In this lab we will setup custom micro-service based application with VM based Nutanix Database ",(0,r.yg)("a",{parentName:"p",href:"https://www.nutanix.com/products/database-service"},"NDB")," service. "),(0,r.yg)("p",null,"In recent years, the growth of microservices has lead to use of VM based databases. Although microservices based databases are available,\ncustomers are still using VM based databases as a datastore. The following may be the reason for customers using VM based databases (not limited to):"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Customer has majority of databases on VM platform "),(0,r.yg)("li",{parentName:"ul"},"Customers DBA team has more expertise with VM based databases"),(0,r.yg)("li",{parentName:"ul"},"Cloud based database providers (AWS RDS) with several database engines are used prevalently"),(0,r.yg)("li",{parentName:"ul"},"Ease of deployment, scale and security (although security for microservices is improving at an exponential rate)"),(0,r.yg)("li",{parentName:"ul"},"Customer's extensive knowledge in providing high availability, disaster recovery and backups for these VM based databases"),(0,r.yg)("li",{parentName:"ul"},"Knowledge of implementing security practices for VMs in general "),(0,r.yg)("li",{parentName:"ul"},"Customers are using VM based databases and are in the middle of migrating to microservices based databases"),(0,r.yg)("li",{parentName:"ul"},"Customers are using a hybrid database environment - both VM based and microservices based databases and have decided to stay this way")),(0,r.yg)("p",null,"Nutanix NDB offers Databases as a service using NDB. Customers can provision hybrid multicloud DBaaS for Microsoft SQL Server, Oracle, PostgreSQL, MongoDB, and MySQL and be able to efficiently manage hundreds to thousands of databases."),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"Estimated time to complete this lab is ",(0,r.yg)("strong",{parentName:"p"},"60 minutes"),".")),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Fun fact"),(0,r.yg)("div",null,(0,r.yg)("body",null,"NDB Operator was presented as a project in Nutanix Hackathon in 2022 by the Japan Solution Engineers (SE) team. The SEs identified a need in the  in the field for their customers and developed a version of the NDB Operator for OpenShift. The team went to win the Hackathon tournament and NDB Operator is now an available solution for customers to take advantage of. This is testament of how Nutanix always have value to customers in mind."))),(0,r.yg)("h2",{id:"pre-requisites-for-using-ndb-deployed-databases"},"Pre-requisites for using NDB Deployed Databases"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"NDB appliance deployed on the Nutanix cluster"),(0,r.yg)("li",{parentName:"ul"},"OCP cluster deployed on the Nutanix cluster - Check the following portions of this guide to create a OCP cluster:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/ocp_ipi_install/"},"OCP with IPI Installer")," "),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/ocp_assisted_install/"},"OCP with Assisted Installer")," or "),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/ocp_ntnx_hci/ocp_vms"},"OCP with Nutanix Cloud Manager")))),(0,r.yg)("li",{parentName:"ul"},"Networking requirements adhering to OCP and Nutanix")),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"At the moment only ",(0,r.yg)("strong",{parentName:"p"},"Postgres")," databases are available to be deployed by NDB Operator for OCP. Nutanix will be adding other NDB capable database platforms (MSSQL, MYSQL, Oracle, etc.) incrementally. There are no ETAs at the moment. Please check Nutanix release announcements."),(0,r.yg)("p",{parentName:"admonition"},"Nutanix provides 24x7x365 support for Postgres along with Postgres Professional. See this ",(0,r.yg)("a",{parentName:"p",href:"https://www.nutanix.com/content/dam/nutanix/partners/technology-alliances/solution-briefs/sb-postges-professional-and-nutanix.pdf"},"Solution Brief")," for more details. ")),(0,r.yg)("h2",{id:"high-level-overview-of-ndb-and-ocp-integration"},"High Level Overview of NDB and OCP integration"),(0,r.yg)("p",null,"At a very high level we will perform the following steps:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Install NDB Operator on the OCP cluster"),(0,r.yg)("li",{parentName:"ol"},"Deploy a new NDB Postgres database"),(0,r.yg)("li",{parentName:"ol"},"Install a custom application on OCP"),(0,r.yg)("li",{parentName:"ol"},"Connect application to NDB Postgres database",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Create database schema"),(0,r.yg)("li",{parentName:"ul"},"Populate database with data "))),(0,r.yg)("li",{parentName:"ol"},"Perform tasks at application level"),(0,r.yg)("li",{parentName:"ol"},"Verify presence of data in NDB provisioned database")),(0,r.yg)("h2",{id:"install-ndb-operator-on-ocp"},"Install NDB Operator on OCP"),(0,r.yg)("p",null,"In this section we will install NDB operator and use yaml files to provision a database. The idea is simulate an environment where developers can create database resources as kubernets manifests."),(0,r.yg)("p",null,"This way developers can easily integrate VM based databases in their regular microservices based workflow."),(0,r.yg)("h3",{id:"prepare-you-linux-tools-vm"},"Prepare you Linux Tools VM"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Logon to your Linux Tools VM using root user name and password (Terminal on Mac/ Putty or PowerShell in Windows)"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"ssh -l root <Linux Tools VM IP>\n")),(0,r.yg)("blockquote",{parentName:"li"},(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Username")," - root")),(0,r.yg)("blockquote",{parentName:"li"},(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Password")," - nutanix default")),(0,r.yg)("admonition",{parentName:"li",title:"Can't find the Linux Tools VM?",type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"If you don't have a Linux Tools VM deployed on your HPOC cluster, follow instructions ",(0,r.yg)("a",{parentName:"p",href:"/toolsvms/linux_tools_vm"},"here")," to deploy one.")))),(0,r.yg)("ol",{start:4},(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Depending on you access to ",(0,r.yg)("inlineCode",{parentName:"p"},"kubeconfig")," file or kubeadmin password, logon to the OCP cluster"),(0,r.yg)(o.A,{groupId:"Login Method",mdxType:"Tabs"},(0,r.yg)(s.A,{value:"kubeconfig file",label:"kubeconfig",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-text",metastring:'title="Export your kubeconfig file to env"',title:'"Export',your:!0,kubeconfig:!0,file:!0,to:!0,'env"':!0},"export KUBECONFIG=/root/xyz/auth/kubeconfig\n"))),(0,r.yg)(s.A,{value:"kubeadmin credentials",label:"kubeadmin",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-text",metastring:'title="Make sure to use your password"',title:'"Make',sure:!0,to:!0,use:!0,your:!0,'password"':!0},"oc login -u kubeadmin -p xxxxx-xxxxx-xxxxx-xxxxx\n"))))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Make sure your OCP cluster is accessible"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Ensure that you are getting output"',title:'"Ensure',that:!0,you:!0,are:!0,getting:!0,'output"':!0},"oc get nodes\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Install Helm (if it is not present)"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Install latest Helm"',title:'"Install',latest:!0,'Helm"':!0},"curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\n#\nchmod 700 get_helm.sh\n#\n./get_helm.sh\n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Verify Helm version"',title:'"Verify',Helm:!0,'version"':!0},"helm version\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Install ",(0,r.yg)("a",{parentName:"p",href:"https://cert-manager.io/docs/installation/#getting-started"},"latest version")," of Cert Manager as a pre-requisite for NDB Operator"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"oc apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.1/cert-manager.yaml\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Make sure all Cert Manager services are up and running"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"oc get po -w -n cert-manager\n")))),(0,r.yg)("h3",{id:"install-the-ndb-operator-for-ocp"},"Install the NDB Operator for OCP"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Add Nutanix's Helm repo"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"helm repo add nutanix https://nutanix.github.io/helm/\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Install NDB Operator using Helm"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"helm install ndb-operator nutanix/ndb-operator --version 0.5.1 -n ndb-operator --create-namespace\n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-text",metastring:'title="Output"',title:'"Output"'},"NAME: ndb-operator\nLAST DEPLOYED: Mon Dec 19 22:58:45 2022\nNAMESPACE: ndb-operator\nSTATUS: deployed           # << Ensure the deployed state\nREVISION: 1\nTEST SUITE: None\n")),(0,r.yg)("admonition",{parentName:"li",type:"info"},(0,r.yg)("p",{parentName:"admonition"},"The operator will be deployed in ",(0,r.yg)("inlineCode",{parentName:"p"},"ndb-operator")," namespace/project."))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Ensure all the resources are healthy in the ",(0,r.yg)("inlineCode",{parentName:"p"},"ndb-operator")," namespace/project."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"oc get all -n ndb-operator\n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-text",metastring:'title="Output"',title:'"Output"'},"#\nNAME                                                   READY   STATUS    RESTARTS   AGE\npod/ndb-operator-controller-manager-77fcb496d5-7qcfc   2/2     Running   0          2m16s\n\nNAME                                                      TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\nservice/ndb-operator-controller-manager-metrics-service   ClusterIP   172.30.244.194   <none>        8443/TCP   2m16s\n\nNAME                                              READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/ndb-operator-controller-manager   1/1     1            1           2m16s\n\nNAME                                                         DESIRED   CURRENT   READY   AGE\nreplicaset.apps/ndb-operator-controller-manager-77fcb496d5   1         1         1       2m16s\n")),(0,r.yg)("admonition",{parentName:"li",type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"You can follow the logs of the ",(0,r.yg)("inlineCode",{parentName:"p"},"ndb-operator-controller-manager")," ",(0,r.yg)("inlineCode",{parentName:"p"},"deployment")," to see the activities of the NDB Operator."),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"oc logs -f deployment.apps/ndb-operator-controller-manager -n ndb-operator\n"))))),(0,r.yg)("h2",{id:"create-ndb-postgres-db"},"Create NDB Postgres DB"),(0,r.yg)("p",null,"In this section we will create a Postgres database using NDB Operator. "),(0,r.yg)("h3",{id:"high-level-steps"},"High Level Steps"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"NDB operator will communicate with NDB server with a create database request "),(0,r.yg)("li",{parentName:"ol"},"NDB server will create the Postgres database VM (instance) and postgres database"),(0,r.yg)("li",{parentName:"ol"},"NDB server will respond to NDB Operator with the result of the requested operation")),(0,r.yg)("h3",{id:"prepare-secrets-for-your-database-server-and-database"},"Prepare Secrets for your Database Server and Database"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create a new OCP project"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"oc new-project ndb\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create a secret for NDB Operator to access NDB server"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"cat << EOF > your-ndb-secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: your-ndb-secret\ntype: Opaque\nstringData:\n  username: ndb-username\n  password: ndb-password\nEOF\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Edit the manifest with your NDB server credentials and save it"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"vi your-ndb-secret.yaml\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Apply the manifest to create NDB server credentials secret"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"oc apply -f your-ndb-secret.yaml\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create a secret with credentials (password and ssh public key) for the new Postgres VM that you will be provisioning."),(0,r.yg)("p",{parentName:"li"},"SSH key is a requirement. This must be included to authenticate to your NDB deployed VM. ",(0,r.yg)("inlineCode",{parentName:"p"},"Database")," resource will fail to deploy if ",(0,r.yg)("strong",{parentName:"p"},"ssh-public-key")," is not included."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"cat << EOF > your-db-secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: your-db-secret        \ntype: Opaque\nstringData:\n  password: postgres_password\n  ssh_public_key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQ....            # << this must be present\nEOF\n")),(0,r.yg)("details",null,(0,r.yg)("summary",null,"No SSH-PUBLIC-KEY?"),(0,r.yg)("div",null,(0,r.yg)("body",null,(0,r.yg)("admonition",{parentName:"li",type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"If you do not have a ",(0,r.yg)("strong",{parentName:"p"},"SSH-PUBLIC-KEY"),", use the ",(0,r.yg)("inlineCode",{parentName:"p"},"ssh-keygen")," command on your ",(0,r.yg)("strong",{parentName:"p"},"Linux Tools VM")," to create a ssh key pair"),(0,r.yg)("p",{parentName:"admonition"},"Remember to keep it safe somewhere. "),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"ssh-keygen -t rsa -b 2048 -f ~/.ssh/for_ndb   # << accept all default answers\nls -l ~/.ssh/\n## Output here\n~/.ssh/for_ndb.pub  # << use this public key in the your-db-secret manifest \n~/.ssh/for_ndb      # << use this private key to logon to the NDB deployed database server\n")))))))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Edit the manifest with your Postgres DB server credentials"',title:'"Edit',the:!0,manifest:!0,with:!0,your:!0,Postgres:!0,DB:!0,server:!0,'credentials"':!0},"vi your-db-secret.yaml\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Apply the manifest to create your Postgres DB server credentials secret"',title:'"Apply',the:!0,manifest:!0,to:!0,create:!0,your:!0,Postgres:!0,DB:!0,server:!0,credentials:!0,'secret"':!0},"oc apply -f your-db-secret.yaml\n")),(0,r.yg)("h3",{id:"get-ndb-clusters-uuid"},"Get NDB Cluster's UUID"),(0,r.yg)("p",null,"We will use curl command to get the Era's cluster UUID in this section. "),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Logon to the  Linux Tools VM using your credentials")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Execute the following command to get Era cluster's UUID. We will use this in our database configuration file in the next section. "),(0,r.yg)(o.A,{mdxType:"Tabs"},(0,r.yg)(s.A,{value:"Template command",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"curl -X GET  -u admin -k https://[NDB IP]/era/v0.9/clusters | jq '.[0].id'\n"))),(0,r.yg)(s.A,{value:"Sample command",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"curl -X GET  -u admin -k https://10.42.12.18/era/v0.9/clusters | jq '.[0].id'\n")))),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-console",metastring:'title="Sample execution and output"',title:'"Sample',execution:!0,and:!0,'output"':!0},"curl -X GET  -u admin -k https://10.42.12.108/era/v0.9/clusters |  jq '.[0].id'\n\nEnter host password for user 'admin':   # << Enter your Era server's password here\n\n\"eafdb83c-e512-46ce-8d7d-6859dc170272\"  # << This uuid will be different for all Era clusters.\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Record the Era server's cluster UUID "))),(0,r.yg)("h3",{id:"create-postgres-database-using-the-ndb-operator"},"Create Postgres Database using the NDB Operator"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create a ",(0,r.yg)("inlineCode",{parentName:"p"},"NDBServer")," server resource by using the following manifest:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"cat << EOF > ndbserver.yaml \napiVersion: ndb.nutanix.com/v1alpha1\nkind: NDBServer\nmetadata:\n  labels:\n    app.kubernetes.io/name: ndbserver\n    app.kubernetes.io/instance: ndbserver\n    app.kubernetes.io/part-of: ndb-operator\n    app.kubernetes.io/managed-by: kustomize\n    app.kubernetes.io/created-by: ndb-operator\n  name: ndb\nspec:\n   # Name of the secret that holds the credentials for NDB: username, password and ca_certificate created earlier\n   credentialSecret: your-ndb-secret\n   # NDB Server's API URL\n   server: https://[NDB IP]:8443/era/v0.9\n   # Set to true to skip SSL certificate validation, should be false if ca_certificate is provided in the credential secret.\n   skipCertificateVerification: true\nEOF\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Edit the file to modify your NDB server IP")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Connect the OCP cluster to your NDB server by applying the manifest you created"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"oc apply -f ndbserver.yaml\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create a Database resource by using the following manifest"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:"{5,12,16}","{5,12,16}":!0},'cat << EOF > database.yaml\napiVersion: ndb.nutanix.com/v1alpha1\nkind: Database\nmetadata:\n# This name that will be used within the kubernetes cluster\n  name: dbforflower                                                          # << This will be our kubernetes database object\'s name\nspec:\n  # Name of the NDBServer resource created earlier\n  ndbRef: ndb\n  isClone: false\n  # Database instance specific details (that is to be provisioned)\n  databaseInstance:\n    clusterId: "a913265b-377c-44cf-8984-d049ade62585"                        # << Change to the NDB server\'s UUID from previous step\n    # Example\n    # clusterId: "a913265b-377c-44cf-8984-d049ade62585"\n    # The database instance name on NDB\n    name: "pgserver<yourinitials>"                                           # << this will be our database server name\n    # Example\n    #name: "pgserverbln"\n    # Names of the databases on that instance\n    databaseNames:\n      - predictiondb                                                         # << this will be our database name\n    # Credentials secret name for NDB installation\n    # data: password, ssh_public_key\n    credentialSecret: your-db-secret\n    size: 10\n    timezone: "UTC"\n    type: postgres\nEOF\n'))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Edit the ",(0,r.yg)("inlineCode",{parentName:"p"},"database.yaml")," file to populate with your environment details"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"vi database.yaml\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create the NDB ",(0,r.yg)("inlineCode",{parentName:"p"},"Database")," resource\nndb"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"oc apply -f database.yaml\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Check the status of the deployment"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"oc get database \n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-text",metastring:'title="Output - you will see provisioning status"',title:'"Output',"-":!0,you:!0,will:!0,see:!0,provisioning:!0,'status"':!0},"NAME          IP ADDRESS   STATUS     TYPE\ndbforflower                CREATING\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"You can also track the progress of the database deployment by looking at the ",(0,r.yg)("inlineCode",{parentName:"p"},"ndb-operator-controller-manager")," pod logs in ",(0,r.yg)("inlineCode",{parentName:"p"},"ndb-operator-system")," namespace"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Make sure to use your pod name"',title:'"Make',sure:!0,to:!0,use:!0,your:!0,pod:!0,'name"':!0},"oc logs -f deployment.apps/ndb-operator-controller-manager -n ndb-operator\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"You can also login to the NDB web page to see the progress. "),(0,r.yg)("p",{parentName:"li"},"In NDB UI, Select ",(0,r.yg)("strong",{parentName:"p"},"Menu")," ",(0,r.yg)("strong",{parentName:"p"},"Operations")),(0,r.yg)("p",{parentName:"li"},(0,r.yg)("img",{src:t(5176).A,width:"2734",height:"1388"})))),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"It will take about ",(0,r.yg)("strong",{parentName:"p"},"20 minutes")," to provision the ",(0,r.yg)("inlineCode",{parentName:"p"},"pgserver")," database server and ",(0,r.yg)("inlineCode",{parentName:"p"},"predictiondb")," database."),(0,r.yg)("p",{parentName:"admonition"},"Refer to the following document for other database creation option with ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/nutanix-cloud-native/ndb-operator"},"NDB Options"))),(0,r.yg)("h3",{id:"check-database-connectivity"},"Check Database Connectivity"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Check the status of NDB deployed database in OCP"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"oc get database \n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-text",metastring:'title="Output - note the READY status and the IP address of the database VM"',title:'"Output',"-":!0,note:!0,the:!0,READY:!0,status:!0,and:!0,IP:!0,address:!0,of:!0,database:!0,'VM"':!0},"NAME          IP ADDRESS    STATUS   TYPE\ndbforflower   10.38.13.45   READY    postgres\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"NDB Operator also creates a service and an endpoint(IP+Port) for you to access the database server "),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"oc get service,ep \n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-text",metastring:'title="Output - note the Cluster IP, endpoint\'s external IP and port number"',title:'"Output',"-":!0,note:!0,the:!0,Cluster:!0,"IP,":!0,"endpoint's":!0,external:!0,IP:!0,and:!0,port:!0,'number"':!0},"NAME                      TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE\nservice/dbforflower-svc   ClusterIP   172.30.188.239   <none>        80/TCP    73s\n\nNAME                        ENDPOINTS          AGE                               \nendpoints/dbforflower-svc   10.38.13.45:5432   73s # << This is IP of the PostGres server deployed by NDB   \n")),(0,r.yg)("p",{parentName:"li"},"The database is now available as an ",(0,r.yg)("inlineCode",{parentName:"p"},"ClusterIP")," resource on port ",(0,r.yg)("inlineCode",{parentName:"p"},"80"),"service to other workloads."),(0,r.yg)("p",{parentName:"li"},"We just need to use the ",(0,r.yg)("inlineCode",{parentName:"p"},"ClusterIP")," of the database service to connect from the front end application pod.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Check if you are able to connect to you database. We will do this by deploying a standalone postgres pod."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Set SCC to run PSQL pod"',title:'"Set',SCC:!0,to:!0,run:!0,PSQL:!0,'pod"':!0},"oc adm policy add-scc-to-user anyuid -z default\n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Deploy the PSQL pod"',title:'"Deploy',the:!0,PSQL:!0,'pod"':!0},"cat << EOF | oc apply -f -\napiVersion: v1\nkind: Pod\nmetadata:\n  name: psql\nspec:\n  restartPolicy: Never\n  containers:\n  - name: psql \n    image: quay.io/coreos/postgres\n    env:\n    - name: POSTGRES_PASSWORD\n      value: postgres_password\n    securityContext:\n      allowPrivilegeEscalation: true\nEOF\n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Login to the PSQL pod and connect to the database server"',title:'"Login',to:!0,the:!0,PSQL:!0,pod:!0,and:!0,connect:!0,database:!0,'server"':!0},"oc exec -it psql -- /bin/sh\n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Inside the PSQL pod, logon to the predictiondb database"',title:'"Inside',the:!0,PSQL:!0,"pod,":!0,logon:!0,to:!0,predictiondb:!0,'database"':!0},"psql -h dbforflower-svc -p 80 -U postgres -d predictiondb\n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Enter the password you used in your-db-secret.yaml file"',title:'"Enter',the:!0,password:!0,you:!0,used:!0,in:!0,"your-db-secret.yaml":!0,'file"':!0},'# psql -h dbforflower-svc -p 80 -U postgres -d predictiondb\nPassword for user postgres: \npsql (9.4.5, server 10.4)\nWARNING: psql major version 9.4, server major version 10.4.\n         Some psql features might not work.\nType "help" for help.\n\npredictiondb=#\n')),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Run \\du command to list the users"',title:'"Run',"\\du":!0,command:!0,to:!0,list:!0,the:!0,'users"':!0},"predictiondb=# \\du \n                                                        List of roles\n  Role name       |                   Attributes                   |                          Member of                           \n----------------------+------------------------------------------------+--------------------------------------------------------------\npg_monitor           | Cannot login                                   | {pg_read_all_settings,pg_read_all_stats,pg_stat_scan_tables}\npg_read_all_settings | Cannot login                                   | {}\npg_read_all_stats    | Cannot login                                   | {}\npg_signal_backend    | Cannot login                                   | {}\npg_stat_scan_tables  | Cannot login                                   | {}\npostgres             | Superuser, Create role, Create DB, Replication | {}\n")))),(0,r.yg)("p",null,"You are able to connect to the database without leaving the OCP command line environment. This is what most developers and devops engineers will have access to, so they can deploy applications. "),(0,r.yg)("h2",{id:"installing-a-custom-three-layer-application"},"Installing a Custom Three-layer Application"),(0,r.yg)("p",null,"In this section we will install a three-layer application (front end, back end and database) to showcase the value of NDB Operator to a customer."),(0,r.yg)("admonition",{title:"References",type:"note"},(0,r.yg)("p",{parentName:"admonition"},"All ideas for this three-layer this application come from this ",(0,r.yg)("a",{parentName:"p",href:"https://www.datagraphi.com/blog/post/2021/2/10/kubernetes-guide-deploying-a-machine-learning-app-built-with-django-react-and-postgresql-using-kubernetes"},"blog"),"."),(0,r.yg)("p",{parentName:"admonition"},"We have only modified the implementation to suit deployment in a OCP cluster with NDB deployed Postgres database.")),(0,r.yg)("h3",{id:"create-database-schema-and-data"},"Create Database Schema and Data"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Apply the application secrets manifest"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"oc apply -f https://raw.githubusercontent.com/nutanix-japan/ocp-gitp/main/docs/ocp_ndb/k8s/app-secrets.yaml\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Download and edit the configmap to match your database service name and port number (if you used a different database name in your ",(0,r.yg)("inlineCode",{parentName:"p"},"ndb.yaml"),"  manifest)"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"curl -LO https://raw.githubusercontent.com/nutanix-japan/ocp-gitp/main/docs/ocp_ndb/k8s/app-variables.yaml\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Edit you ",(0,r.yg)("inlineCode",{parentName:"p"},"app-variables.yaml")," file to match your DB_HOST service name and DB_PORT port number"),(0,r.yg)(o.A,{mdxType:"Tabs"},(0,r.yg)(s.A,{value:"Template file",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:"{23,24}","{23,24}":!0},'apiVersion: v1\nkind: ConfigMap\nmetadata:\n   name: app-variables\ndata:\n   #env variables for the postgres component\n   POSTGRES_USER: postgres_user\n   POSTGRES_DB: predictiondb\n\n   #env variables for the backend component\n   DJANGO_ENV: development\n   DEBUG: "1"\n   SECRET_KEY: secretsecretsecretsecretsecret\n   DJANGO_ALLOWED_HOSTS: "*"\n   DJANGO_ADMIN_USER: admin\n   DJANGO_ADMIN_EMAIL: "admin@example.com"\n   \n   #db server components\n   DATABASE: postgres\n   DB_ENGINE: "django.db.backends.postgresql"  \n   DB_DATABASE: predictiondb\n   DB_USER: postgres \n   DB_HOST: <your DB service>                  #  << Match your database service\n   DB_PORT: <your DB port>                     #  << Match your database service\'s port number\n'))),(0,r.yg)(s.A,{value:"Sample file",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:"{23,24}","{23,24}":!0},'apiVersion: v1\nkind: ConfigMap\nmetadata:\n   name: app-variables\ndata:\n   #env variables for the postgres component\n   POSTGRES_USER: postgres_user\n   POSTGRES_DB: predictiondb\n\n   #env variables for the backend component\n   DJANGO_ENV: development\n   DEBUG: "1"\n   SECRET_KEY: secretsecretsecretsecretsecret\n   DJANGO_ALLOWED_HOSTS: "*"\n   DJANGO_ADMIN_USER: admin\n   DJANGO_ADMIN_EMAIL: "admin@example.com"\n   \n   #db server components\n   DATABASE: postgres\n   DB_ENGINE: "django.db.backends.postgresql"  \n   DB_DATABASE: predictiondb\n   DB_USER: postgres \n   DB_HOST: dbforflower-svc\n   DB_PORT: "80"\n')))))),(0,r.yg)("ol",{start:4},(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"After making sure that your database service name and port number matches, apply the configmap manifest"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"oc apply -f app-variables.yaml\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Run this job to populate your database with schema and data"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"oc apply -f https://raw.githubusercontent.com/nutanix-japan/ocp-gitp/main/docs/ocp_ndb/k8s/django-job.yaml\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Monitor the job to make sure it has completed"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"oc get job django-job -w\n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-text",metastring:'title="Output"',title:'"Output"'},"# oc get job -w\nNAME         COMPLETIONS   DURATION   AGE\ndjango-job   0/1           14s        15s\ndjango-job   0/1           14s        15s\ndjango-job   0/1           17s        18s\ndjango-job   1/1           19s        20s   # << Wait for completion\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"You can analyse the logs to make sure the job has completed without any issues"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Analyse the pod logs - your pod name will be different"',title:'"Analyse',the:!0,pod:!0,logs:!0,"-":!0,your:!0,name:!0,will:!0,be:!0,'different"':!0},"oc logs django-job-cmcxk\n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="You must see migration jobs runnig - ignore warnings"',title:'"You',must:!0,see:!0,migration:!0,jobs:!0,runnig:!0,"-":!0,ignore:!0,'warnings"':!0},"Running migrations:\nApplying contenttypes.0001_initial... OK\nApplying auth.0001_initial... OK\nApplying admin.0001_initial... OK\nApplying admin.0002_logentry_remove_auto_add... OK\nApplying admin.0003_logentry_add_action_flag_choices... OK\nApplying contenttypes.0002_remove_content_type_name... OK\nApplying auth.0002_alter_permission_name_max_length... OK\nApplying auth.0003_alter_user_email_max_length... OK\nApplying auth.0004_alter_user_username_opts... OK\nApplying auth.0005_alter_user_last_login_null... OK\nApplying auth.0006_require_contenttypes_0002... OK\nApplying auth.0007_alter_validators_add_error_messages... OK\nApplying auth.0008_alter_user_username_max_length... OK\nApplying auth.0009_alter_user_last_name_max_length... OK\nApplying auth.0010_alter_group_name_max_length... OK\nApplying auth.0011_update_proxy_permissions... OK\nApplying auth.0012_alter_user_first_name_max_length... OK\nApplying authtoken.0001_initial... OK\nApplying authtoken.0002_auto_20160226_1747... OK\nApplying sessions.0001_initial... OK\n")),(0,r.yg)("admonition",{parentName:"li",title:"what if my job fails?",type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"You would have to troubleshoot. "),(0,r.yg)("p",{parentName:"admonition"},"Delete your job, change any references in ",(0,r.yg)("strong",{parentName:"p"},"app_variables")," config map that may have been wrong, and re-run the job."),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"oc delete -f django-job.yaml\noc apply -f django-job\noc get job django-job -o json | oc replace --force -f -\n")))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Log back into the database to check if there are new tables "),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Login to the pod and connect to database server"',title:'"Login',to:!0,the:!0,pod:!0,and:!0,connect:!0,database:!0,'server"':!0},"oc exec -it psql -- /bin/sh\n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Inside the Postgres pod, logon to the predictiondb database"',title:'"Inside',the:!0,Postgres:!0,"pod,":!0,logon:!0,to:!0,predictiondb:!0,'database"':!0},"psql -h dbforflower-svc -p 80 -U postgres -d predictiondb\n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Enter postgres_password as the password"',title:'"Enter',postgres_password:!0,as:!0,the:!0,'password"':!0},'# psql -h dbforflower-svc -p 80 -U postgres -d predictiondb\nPassword for user postgres: \npsql (9.4.5, server 10.4)\nWARNING: psql major version 9.4, server major version 10.4.\n         Some psql features might not work.\nType "help" for help.\n\npredictiondb=#\n')),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",11:!0,className:"language-bash",metastring:'title="You should see 11 tables created"',title:'"You',should:!0,see:!0,tables:!0,'created"':!0},"predictiondb=# \\dt\n               List of relations\n Schema |            Name            | Type  |  Owner   \n--------+----------------------------+-------+----------\n public | auth_group                 | table | postgres\n public | auth_group_permissions     | table | postgres\n public | auth_permission            | table | postgres\n public | auth_user                  | table | postgres\n public | auth_user_groups           | table | postgres\n public | auth_user_user_permissions | table | postgres\n public | authtoken_token            | table | postgres\n public | django_admin_log           | table | postgres\n public | django_content_type        | table | postgres\n public | django_migrations          | table | postgres\n public | django_session             | table | postgres\n(11 rows)\n")))),(0,r.yg)("h3",{id:"install-front-end-and-back-end-applications"},"Install Front End and Back End applications"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Run the following commands to create the front end and back end applications "),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"oc apply -f https://raw.githubusercontent.com/nutanix-japan/ocp-gitp/main/docs/ocp_ndb/k8s/django-deployment.yaml\noc apply -f https://raw.githubusercontent.com/nutanix-japan/ocp-gitp/main/docs/ocp_ndb/k8s/react-deployment.yaml\n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Output - you will see deployments and services created"',title:'"Output',"-":!0,you:!0,will:!0,see:!0,deployments:!0,and:!0,services:!0,'created"':!0},"deployment.apps/django-deployment created\nservice/django-cluster-ip-service created\n#\ndeployment.apps/react-deployment created\nservice/react-cluster-ip-service created\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Make sure all the pods are running "),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Make sure all pods are running"',title:'"Make',sure:!0,all:!0,pods:!0,are:!0,'running"':!0},"oc get po \n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Output"',title:'"Output"'},"oc get po \nNAME                                 READY   STATUS      RESTARTS   AGE\ndjango-deployment-5b96897c59-cqhmp   1/1     Running     0          2m15s\ndjango-deployment-5b96897c59-m927z   1/1     Running     0          2m15s\ndjango-job-sbctr                     0/1     Completed   0          28m\npsql                                 1/1     Running     0          114m\nreact-deployment-cdff5fdbf-28mnq     1/1     Running     0          2m13s\nreact-deployment-cdff5fdbf-5dhm5     1/1     Running     0          2m13s\n")))),(0,r.yg)("h3",{id:"create-routes-to-access-the-application"},"Create Routes to Access the Application"),(0,r.yg)("p",null,"We will need to create routes to access the front end and back end applications. "),(0,r.yg)("p",null,"You can access the application through the OCP Routes. "),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Download the routes file"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"curl -LO https://raw.githubusercontent.com/nutanix-japan/ocp-gitp/main/docs/ocp_ndb/k8s/routes.yaml\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Change the URL in the downloaded file to suit OCP cluster name and your domain."),(0,r.yg)("blockquote",{parentName:"li"},(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"OCP Cluster Name")," - ocpuserXX (change to your  OCP cluster name)")),(0,r.yg)("blockquote",{parentName:"li"},(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Domain"),"           - ntnxlab.local "))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Using ",(0,r.yg)("inlineCode",{parentName:"p"},"sed")," command this can be done in a single command"),(0,r.yg)(o.A,{mdxType:"Tabs"},(0,r.yg)(s.A,{value:"Template command",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"sed -i 's/ROUTE_HOST/flower.apps. <ocpuserXX> .ntnxlab.local/g' routes.yaml\n"))),(0,r.yg)(s.A,{value:"Sample command",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"sed -i 's/ROUTE_HOST/flower.apps.ocpuser01.ntnxlab.local/g' routes.yaml\n"))))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create the routes "),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"oc apply -f routes.yaml\n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Check the routes"',title:'"Check',the:!0,'routes"':!0},"oc get routes | awk '{print $1,$2,$3}'\n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-text",metastring:'title="Output"',title:'"Output"'},"NAME           HOST/PORT                                         PATH\nroute-path-a   flower.apps.ocpuserXX.ntnxlab.local    /\nroute-path-b   flower.apps.ocpuserXX.ntnxlab.local    /admin\nroute-path-c   flower.apps.ocpuserXX.ntnxlab.local    /api\nroute-path-d   flower.apps.ocpuserXX.ntnxlab.local    /static/admin/\nroute-path-e   flower.apps.ocpuserXX.ntnxlab.local    /static/rest_framework/\nroute-path-f   flower.apps.ocpuserXX.ntnxlab.local    /static/\nroute-path-g   flower.apps.ocpuserXX.ntnxlab.local    /media/\n")))),(0,r.yg)("h3",{id:"testing-front-end-react-application"},"Testing Front End React Application"),(0,r.yg)("ol",{start:2},(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Logon to your Windows Tools VM "),(0,r.yg)("blockquote",{parentName:"li"},(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Username")," - ",(0,r.yg)("a",{parentName:"p",href:"mailto:administrator@ntnxlab.local"},"administrator@ntnxlab.local"))),(0,r.yg)("blockquote",{parentName:"li"},(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Password")," - nutanix default"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Open the following URL in Chrome browser to access the Front End React application"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-url"},"http://flower.apps.ocpuserXX.ntnxlab.local/\n")),(0,r.yg)(o.A,{mdxType:"Tabs"},(0,r.yg)(s.A,{value:"Template URL",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-url"},"http://flower.apps.ocpuserXX.ntnxlab.local/\n"))),(0,r.yg)(s.A,{value:"Sample URL",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-url"},"http://flower.apps.ocpuser01.ntnxlab.local/\n"))))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Enter the following credentials and click on ",(0,r.yg)("strong",{parentName:"p"},"SIGN IN")),(0,r.yg)("blockquote",{parentName:"li"},(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Username")," - admin")),(0,r.yg)("blockquote",{parentName:"li"},(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Password")," - admin_password")),(0,r.yg)("p",{parentName:"li"},(0,r.yg)("img",{src:t(1846).A,width:"1000",height:"625"}))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Move the sliders across and click on ",(0,r.yg)("strong",{parentName:"p"},"Predict")," to get flower names based on their physical attributes"),(0,r.yg)("p",{parentName:"li"},(0,r.yg)("img",{src:t(5524).A,width:"847",height:"500"})))),(0,r.yg)("p",null,"Now that we have finished testing the front end React application, let's move on to testing back end Django application."),(0,r.yg)("h3",{id:"testing-back-end-django-application"},"Testing Back End Django Application"),(0,r.yg)("p",null,"Django application is used to manage users that will access and manage the front end React application."),(0,r.yg)("p",null,"We will create a new user in the Django application which we will then use in authenticating to front end React application."),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Open the following URL in Chrome browser to access the Front End React application"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-url"},"http://flower.apps.ocpuserXX.ntnxlab.local/admin \n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Enter the following credentials and click on ",(0,r.yg)("strong",{parentName:"p"},"SIGN IN")),(0,r.yg)("blockquote",{parentName:"li"},(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Username")," - admin")),(0,r.yg)("blockquote",{parentName:"li"},(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Password")," - admin_password")),(0,r.yg)("p",{parentName:"li"},(0,r.yg)("img",{src:t(2790).A,width:"1174",height:"485"}))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Click on ",(0,r.yg)("strong",{parentName:"p"},"+ Add")," to add users "),(0,r.yg)("p",{parentName:"li"},(0,r.yg)("img",{src:t(6894).A,width:"1110",height:"314"}))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Enter the following details:"),(0,r.yg)("blockquote",{parentName:"li"},(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Username")," - ",(0,r.yg)("em",{parentName:"p"},"Your-Initials-user")," (e.g. xyz-user)")),(0,r.yg)("blockquote",{parentName:"li"},(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Password")," - password of your choice (make sure to remember this)")),(0,r.yg)("blockquote",{parentName:"li"},(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Password confirmation")," - re-enter the password of your choice"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Click on ",(0,r.yg)("strong",{parentName:"p"},"SAVE"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Check the confirmation message "),(0,r.yg)("p",{parentName:"li"},(0,r.yg)("img",{src:t(4385).A,width:"1142",height:"337"}))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Return to front end React application and test the new credentials. ")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Check if you are able to login with the newly created credentials. Play around with the flower name prediction AI application and have some fun."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-url"},"http://flower.apps.ocpuserXX.ntnxlab.local/admin \n")),(0,r.yg)("blockquote",{parentName:"li"},(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Username")," - ",(0,r.yg)("em",{parentName:"p"},"Your-Initials-user")," (e.g. xyz-user)")),(0,r.yg)("blockquote",{parentName:"li"},(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Password")," - password of your choice from previous step")),(0,r.yg)("p",{parentName:"li"},(0,r.yg)("img",{src:t(7102).A,width:"1153",height:"475"})),(0,r.yg)("p",{parentName:"li"},(0,r.yg)("img",{src:t(2676).A,width:"1184",height:"491"})))),(0,r.yg)("h3",{id:"checking-postgres-database-data"},"Checking Postgres Database Data"),(0,r.yg)("p",null,"In this section we will confirm that the new user we created in from the back end Django app is present in the database "),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Log back into the database to check if there are new users "),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Login to the psql pod and connect to database server"',title:'"Login',to:!0,the:!0,psql:!0,pod:!0,and:!0,connect:!0,database:!0,'server"':!0},"oc exec -it psql -- /bin/sh\n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Inside the Postgres pod, logon to the predictiondb database"',title:'"Inside',the:!0,Postgres:!0,"pod,":!0,logon:!0,to:!0,predictiondb:!0,'database"':!0},"psql -h dbforflower-svc -p 80 -U postgres -d predictiondb\n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Enter postgres_password as the password"',title:'"Enter',postgres_password:!0,as:!0,the:!0,'password"':!0},'# psql -h dbforflower-svc -p 80 -U postgres -d predictiondb\nPassword for user postgres: \npsql (9.4.5, server 10.4)\nWARNING: psql major version 9.4, server major version 10.4.\n         Some psql features might not work.\nType "help" for help.\n\npredictiondb=#\n'))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Execute the following query "),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT username, last_login FROM auth_user;\n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-text",metastring:'title="Output of query"',title:'"Output',of:!0,'query"':!0},"predictiondb=# SELECT username, last_login FROM auth_user;\n\nusername |          last_login           \n----------+-------------------------------\nadmin    | 2022-12-14 01:38:41.480801+00\nxyz-user | 2022-12-14 01:38:53.474404+00  # << This is your new user\n(2 rows)\n")))),(0,r.yg)("p",null,"This proves that all data is present in the datastore (Postgres in a VM deployed by NDB) of the application. "),(0,r.yg)("h2",{id:"takeaways"},"Takeaways"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"NDB Operator provides ease of use for developers, DevOps engineers, administrators to deploy and use VM based databases without leaving the OCP (kubernetes) ecosystem."),(0,r.yg)("li",{parentName:"ul"},"Deploying databases is as simple as creating a yaml manifest file "),(0,r.yg)("li",{parentName:"ul"},"NDB deployed databases are available as a kubernetes ",(0,r.yg)("inlineCode",{parentName:"li"},"service")," for other microservices in the ecosystem to connect to")))}u.isMDXComponent=!0},4385:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/add-user-confirm-987df6cb5d692bfee5a3647779e043fb.png"},6894:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/add-user-9245a1159180f589523b77e623add1dd.png"},2790:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/django-splash-05297311cfd3ac990faeb0ebb309b29f.png"},5176:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/ndbprogress-a891178f69fabe5a939ce92ece48c272.png"},2676:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/react-new-signin-splash-c84aa9fd97a0cd567dc0deafe313b86e.png"},7102:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/react-new-signin-9364b9090ec334563417b06b8e5c2378.png"},5524:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/react-prediction-d87e852dd480aeefe649e5d8ae3a9818.png"},1846:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/react-splash-18b27e0117af4606275450cff10d1f3f.png"}}]);