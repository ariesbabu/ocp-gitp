"use strict";(self.webpackChunkocp_gitp=self.webpackChunkocp_gitp||[]).push([[4064],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>m});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(n),g=a,m=u["".concat(c,".").concat(g)]||u[g]||d[g]||o;return n?r.createElement(m,l(l({ref:t},p),{},{components:n})):r.createElement(m,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=g;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},2890:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=n(8168),a=(n(6540),n(5680));const o={sidebar_position:7,title:"Docker Pull Images"},l=void 0,i={unversionedId:"optional_labs/docker_pull",id:"optional_labs/docker_pull",title:"Docker Pull Images",description:"To avoid hitting the rate limit on Docker image pulls, the following procedure can be used to add Docker credentials to the existing OCP pull secret.",source:"@site/docs/optional_labs/docker_pull.md",sourceDirName:"optional_labs",slug:"/optional_labs/docker_pull",permalink:"/optional_labs/docker_pull",draft:!1,editUrl:"https://github.com/ariesbabu/ocp-gitp/edit/main/docs/optional_labs/docker_pull.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"Docker Pull Images"},sidebar:"tutorialSidebar",previous:{title:"Deploy Multi-Zone Application",permalink:"/ocp_topology/multiaz_app1"},next:{title:"Deploying IDP for OCP",permalink:"/optional_labs/ocp_idp"}},c={},s=[{value:"Add the Secret to the Global Cluster Pull Secret",id:"add-the-secret-to-the-global-cluster-pull-secret",level:2}],p={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.yg)(u,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"To avoid hitting the rate limit on Docker image pulls, the following procedure can be used to add Docker credentials to the existing OCP pull secret."),(0,a.yg)("h2",{id:"add-the-secret-to-the-global-cluster-pull-secret"},"Add the Secret to the Global Cluster Pull Secret"),(0,a.yg)("p",null,"If you want the credentials to be available cluster-wide (so all projects can pull images from the registry without needing to create secrets in each namespace), you can update the global pull secret in the openshift-config namespace."),(0,a.yg)("p",null,"Extract the Current Global Pull Secret"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"oc extract secret/pull-secret -n openshift-config --to=/. --confirm\n")),(0,a.yg)("p",null,"Use docker user name and password hash"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"echo -n 'myuser:mypassword' | base64\n")),(0,a.yg)("p",null,"This creates a file named .dockerconfigjson in the current directory ",(0,a.yg)("inlineCode",{parentName:"p"},".")),(0,a.yg)("p",null,"Merge the New Registry Credentials\nEdit the .dockerconfigjson file to include the new registry credentials. The file is a JSON object with an auths key. Add an entry for your registry:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json",metastring:"{7,8,9}","{7,8,9}":!0},'{\n  "auths": {\n    "<existing-registry>": {\n      "auth": "<existing-auth>",\n      "email": "<existing-email>"\n    },\n    "<new-registry-server>": {\n      "auth": "<base64-encoded-username:password>",\n      "email": "<email>"\n    }\n  }\n}\n')),(0,a.yg)("p",null,"Example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json",metastring:"{19,20,21}","{19,20,21}":!0},'{\n    "auths": {\n        "cloud.openshift.com": {\n            "auth": "==",\n            "email": "email@nutanix.com"\n        },\n        "quay.io": {\n            "auth": "==",\n            "email": "email@nutanix.com"\n        },\n        "registry.connect.redhat.com": {\n            "auth": "==",\n            "email": "email@nutanix.com"\n        },\n        "registry.redhat.io": {\n            "auth": "==",\n            "email": "email@nutanix.com"\n        },\n        "docker.io": {\n            "auth": "bXl1c2VyOm15cGFzxxxxxx",\n            "email": "email@personal.com"\n        }\n    }\n}\n')),(0,a.yg)("p",null,"Update the Global Pull Secret"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"oc set data secret/pull-secret -n openshift-config --from-file=.dockerconfigjson=.dockerconfigjson\n")),(0,a.yg)("p",null,"This update propagates to all nodes, which may take some time depending on the cluster size."),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"Updating the global pull secret affects all projects and requires cluster-admin privileges. Use this approach cautiously to avoid overwriting existing credentials.")),(0,a.yg)("p",null,"Verify the Configuration"),(0,a.yg)("p",null,"To test that the pull secret works, create a pod that uses an image from the private registry:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"oc run test-pod --image=nginx --restart=Never -n default\n")),(0,a.yg)("p",null,"Confirm the Secret Is Linked to the Service Account\nCheck that the pull secret is linked to the service account used by your workloads (e.g., default)."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"oc describe serviceaccount default\n")))}d.isMDXComponent=!0}}]);